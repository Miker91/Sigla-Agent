# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_cleaning_agent
# Time Created: 2025-04-16 16:11:53

def data_cleaner(data_raw):
    import pandas as pd
    import numpy as np
    from sklearn.impute import SimpleImputer



    data = data_raw.copy()

    # Drop unnecessary columns with 100% missing values (Unnamed columns)
    unnamed_cols = [col for col in data.columns if col.startswith('Unnamed')]
    data.drop(columns=unnamed_cols, inplace=True)

    # Handle columns with very high missing rates
    high_missing_cols = [
        'Czas zakończenia', 'Klient', 'PS', 'Under', 'Wind', 'Szkoda', 'MS', 'Agent', 'Klasyfikacja'
    ]
    data.drop(columns=high_missing_cols, inplace=True)

    # For the 'Komentarz' column, fill missing values with empty string
    if 'Komentarz' in data.columns:
        data['Komentarz'].fillna('', inplace=True)

    # For categorical columns, fill missing values with mode (most frequent value)
    categorical_cols = [
        'Organizacja', 'Badanie', 'Proces', 'Czynność', 'Podczynność', 'Komórka organizacyjna',
        'Rola 1', 'Rola 2 Under', 'Użytkownik/obserwowany', 'Wpis dokonany przez', 'Fragment tekstu'
    ]
    for col in categorical_cols:
        if col in data.columns:
            mode_val = data[col].mode(dropna=True)
            if not mode_val.empty:
                data[col].fillna(mode_val[0], inplace=True)

    # Convert date/time columns to proper datetime objects
    if 'Czas rozpoczęcia' in data.columns:
        data['Czas rozpoczęcia'] = pd.to_datetime(data['Czas rozpoczęcia'], errors='coerce')
    if 'Godzina' in data.columns:
        # Convert 'Godzina' float to time
        def float_to_time(f):
            if pd.isnull(f):
                return pd.NaT
            total_seconds = int(f * 3600)
            hours = total_seconds // 3600
            minutes = (total_seconds % 3600) // 60
            seconds = total_seconds % 60
            return pd.to_datetime(f'{hours:02d}:{minutes:02d}:{seconds:02d}').time()

        data['Godzina'] = data['Godzina'].apply(float_to_time)

    # For columns with binary or categorical indicators, fill missing with mode or 0
    bin_cols = ['Agent', 'PS', 'Under', 'Wind', 'Szkoda', 'MS']
    for col in bin_cols:
        if col in data.columns:
            mode_val = data[col].mode(dropna=True)
            fill_value = mode_val[0] if not mode_val.empty else 0
            data[col].fillna(fill_value, inplace=True)

    # For 'Długośc', fill missing with median (assuming numeric)
    if 'Długośc' in data.columns:
        median_value = data['Długośc'].median()
        data['Długośc'].fillna(median_value, inplace=True)

    # For remaining numeric columns with missing values, impute with median
    for col in data.select_dtypes(include=[np.number]).columns:
        if col not in ['Długośc', 'Godzina', 'Agent', 'PS', 'Under', 'Wind', 'Szkoda', 'MS']:
            if data[col].isnull().any():
                median_val = data[col].median()
                data[col].fillna(median_val, inplace=True)

    # For categorical columns not already handled, fill missing with mode
    all_cats = data.select_dtypes(include=[object]).columns
    for col in all_cats:
        if data[col].isnull().any():
            mode_val = data[col].mode(dropna=True)
            if not mode_val.empty:
                data[col].fillna(mode_val[0], inplace=True)

    return data